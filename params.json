{"name":"Flac","tagline":"Mirror of git://git.xiph.org/flac.git","body":"/* FLAC - Free Lossless Audio Codec\r\n * Copyright (C) 2001-2009  Josh Coalson\r\n * Copyright (C) 2011-2013  Xiph.Org Foundation\r\n *\r\n * This file is part the FLAC project.  FLAC is comprised of several\r\n * components distributed under different licenses.  The codec libraries\r\n * are distributed under Xiph.Org's BSD-like license (see the file\r\n * COPYING.Xiph in this distribution).  All other programs, libraries, and\r\n * plugins are distributed under the LGPL or GPL (see COPYING.LGPL and\r\n * COPYING.GPL).  The documentation is distributed under the Gnu FDL (see\r\n * COPYING.FDL).  Each file in the FLAC distribution contains at the top the\r\n * terms under which it may be distributed.\r\n *\r\n * Since this particular file is relevant to all components of FLAC,\r\n * it may be distributed under the Xiph.Org license, which is the least\r\n * restrictive of those mentioned above.  See the file COPYING.Xiph in this\r\n * distribution.\r\n */\r\n\r\n\r\nFLAC is an Open Source lossless audio codec developed by Josh Coalson from 2001\r\nto 2009.\r\n\r\nFrom January 2012 FLAC is being maintained by Erik de Castro Lopo under the\r\nauspices of the Xiph.org Foundation.\r\n\r\nFLAC is comprised of\r\n  * `libFLAC', a library which implements reference encoders and\r\n    decoders for native FLAC and Ogg FLAC, and a metadata interface\r\n  * `libFLAC++', a C++ object wrapper library around libFLAC\r\n  * `flac', a command-line program for encoding and decoding files\r\n  * `metaflac', a command-line program for viewing and editing FLAC\r\n    metadata\r\n  * player plugins for XMMS and Winamp\r\n  * user and API documentation\r\n\r\nThe libraries (libFLAC, libFLAC++) are\r\nlicensed under Xiph.org's BSD-like license (see COPYING.Xiph).  All other\r\nprograms and plugins are licensed under the GNU General Public License\r\n(see COPYING.GPL).  The documentation is licensed under the GNU Free\r\nDocumentation License (see COPYING.FDL).\r\n\r\n\r\n===============================================================================\r\nFLAC - 1.3.0 - Contents\r\n===============================================================================\r\n\r\n- Introduction\r\n- Prerequisites\r\n- Note to embedded developers\r\n- Building in a GNU environment\r\n- Building with Makefile.lite\r\n- Building with MSVC\r\n- Building on Mac OS X\r\n\r\n\r\n===============================================================================\r\nIntroduction\r\n===============================================================================\r\n\r\nThis is the source release for the FLAC project.  See\r\n\r\n\tdoc/html/index.html\r\n\r\nfor full documentation.\r\n\r\nA brief description of the directory tree:\r\n\r\n\tdoc/          the HTML documentation\r\n\tinclude/      public include files for libFLAC and libFLAC++\r\n\tman/          the man page for `flac'\r\n\tsrc/          the source code and private headers\r\n\ttest/         the test scripts\r\n\r\n\r\n===============================================================================\r\nPrerequisites\r\n===============================================================================\r\n\r\nTo build FLAC with support for Ogg FLAC you must have built and installed\r\nlibogg according to the specific instructions below.  You must have\r\nlibogg 1.1.2 or greater, or there will be seeking problems with Ogg FLAC.\r\n\r\nIf you are building on x86 and want the assembly optimizations, you will\r\nneed to have NASM >= 0.98.30 installed according to the specific instructions\r\nbelow.\r\n\r\n\r\n===============================================================================\r\nNote to embedded developers\r\n===============================================================================\r\n\r\nlibFLAC has grown larger over time as more functionality has been\r\nincluded, but much of it may be unnecessary for a particular embedded\r\nimplementation.  Unused parts may be pruned by some simple editing of\r\nconfigure.ac and src/libFLAC/Makefile.am; the following dependency\r\ngraph shows which modules may be pruned without breaking things\r\nfurther down:\r\n\r\nmetadata.h\r\n\tstream_decoder.h\r\n\tformat.h\r\n\r\nstream_encoder.h\r\n\tstream_decoder.h\r\n\tformat.h\r\n\r\nstream_decoder.h\r\n\tformat.h\r\n\r\nIn other words, for pure decoding applications, both the stream encoder\r\nand metadata editing interfaces can be safely removed.\r\n\r\nThere is a section dedicated to embedded use in the libFLAC API\r\nHTML documentation (see doc/html/api/index.html).\r\n\r\nAlso, there are several places in the libFLAC code with comments marked\r\nwith \"OPT:\" where a #define can be changed to enable code that might be\r\nfaster on a specific platform.  Experimenting with these can yield faster\r\nbinaries.\r\n\r\n\r\n===============================================================================\r\nBuilding in a GNU environment\r\n===============================================================================\r\n\r\nFLAC uses autoconf and libtool for configuring and building.\r\nBetter documentation for these will be forthcoming, but in\r\ngeneral, this should work:\r\n\r\n./configure && make && make check && make install\r\n\r\nThe 'make check' step is optional; omit it to skip all the tests,\r\nwhich can take several hours and use around 70-80 megs of disk space.\r\nEven though it will stop with an explicit message on any failure, it\r\ndoes print out a lot of stuff so you might want to capture the output\r\nto a file if you're having a problem.  Also, don't run 'make check'\r\nas root because it confuses some of the tests.\r\n\r\nNOTE: Despite our best efforts it's entirely possible to have\r\nproblems when using older versions of autoconf, automake, or\r\nlibtool.  If you have the latest versions and still can't get it\r\nto work, see the next section on Makefile.lite.\r\n\r\nThere are a few FLAC-specific arguments you can give to\r\n`configure':\r\n\r\n--enable-debug : Builds everything with debug symbols and some\r\nextra (and more verbose) error checking.\r\n\r\n--disable-asm-optimizations : Disables the compilation of the\r\nassembly routines.  Many routines have assembly versions for\r\nspeed and `configure' is pretty good about knowing what is\r\nsupported, but you can use this option to build only from the\r\nC sources.  May be necessary for building on OS X (Intel)\r\n\r\n--enable-sse : If you are building for an x86 CPU that supports\r\nSSE instructions, you can enable some of the faster routines\r\nif your operating system also supports SSE instructions.  flac\r\ncan tell if the CPU supports the instructions but currently has\r\nno way to test if the OS does, so if it does, you must pass\r\nthis argument to configure to use the SSE routines.  If flac\r\ncrashes when built with this option you will have to go back and\r\nconfigure without --enable-sse.  Note that\r\n--disable-asm-optimizations implies --disable-sse.\r\n\r\n--enable-local-xmms-plugin : Installs the FLAC XMMS plugin in\r\n$HOME/.xmms/Plugins, instead of the global XMMS plugin area\r\n(usually /usr/lib/xmms/Input).\r\n\r\n--with-ogg=\r\n--with-xmms-prefix=\r\n--with-libiconv-prefix=\r\nUse these if you have these packages but configure can't find them.\r\n\r\nIf you want to build completely from scratch (i.e. starting with just\r\nconfigure.ac and Makefile.am) you should be able to just run 'autogen.sh'\r\nbut make sure and read the comments in that file first.\r\n\r\n\r\n===============================================================================\r\nBuilding with Makefile.lite\r\n===============================================================================\r\n\r\nThere is a more lightweight build system for do-it-yourself-ers.\r\nIt is also useful if configure isn't working, which may be the\r\ncase since lately we've had some problems with different versions\r\nof automake and libtool.  The Makefile.lite system should work\r\non GNU systems with few or no adjustments.\r\n\r\nFrom the top level just 'make -f Makefile.lite'.  You can\r\nspecify zero or one optional target from 'release', 'debug',\r\n'test', or 'clean'.  The default is 'release'.  There is no\r\n'install' target but everything you need will end up in the\r\nobj/ directory.\r\n\r\nIf you are not on an x86 system or you don't have nasm, you\r\nmay have to change the DEFINES in src/libFLAC/Makefile.lite.  If\r\nyou don't have nasm, remove -DFLAC__HAS_NASM.  If your target is\r\nnot an x86, change -DFLAC__CPU_IA32 to -DFLAC__CPU_UNKNOWN.\r\n\r\n\r\n===============================================================================\r\nBuilding with MSVC\r\n===============================================================================\r\n\r\nThere are .vcproj projects and a master FLAC.sln solution to build all\r\nthe libraries and executables with MSVC 2005 or newer.\r\n\r\nPrerequisite: you must have the Ogg libraries installed as described\r\nlater.\r\n\r\nPrerequisite: you must have nasm installed, and nasm.exe must be in\r\nyour PATH, or the path to nasm.exe must be added to the list of\r\ndirectories for executable files in the MSVC global options.\r\n\r\nVC++ 2005:\r\nTo build everything, run Visual Studio, do File|Open and open FLAC.sln.\r\nFrom the dropdown in the toolbar, select \"Release\" instead of \"Debug\",\r\nthen hit F7 to build.\r\n\r\nThis will build all libraries both statically (e.g.\r\nobjs\\release\\lib\\libFLAC_static.lib) and as DLLs (e.g.\r\nobjs\\release\\lib\\libFLAC.dll), and it will build all binaries, statically\r\nlinked (e.g. objs\\release\\bin\\flac.exe).\r\n\r\nEverything will end up in the \"objs\" directory.  DLLs and .exe files\r\nare all that are needed and can be copied to an installation area and\r\nadded to the PATH.\r\n\r\nBy default the code is configured with Ogg support. Before building FLAC\r\nyou will need to get the Ogg source distribution\r\n(see http://xiph.org/downloads/), build libogg_static.lib (load\r\nwin32\\libogg_static.sln, change solution configuration to \"Release\" and\r\ncode generation to \"Multi-threaded (/MT)\", then build), copy libogg_static.lib\r\ninto FLAC's 'objs\\release\\lib' directory, and copy the entire include\\ogg tree\r\ninto FLAC's 'include' directory (so that there is an 'ogg' directory in FLAC's\r\n'include' directory with the files ogg.h, os_types.h and config_types.h).\r\n\r\nIf you want to build without Ogg support, instead edit all .vcproj files\r\nand remove any \"FLAC__HAS_OGG\" definitions.\r\n\r\n\r\n===============================================================================\r\nBuilding on Mac OS X\r\n===============================================================================\r\n\r\nIf you have Fink or a recent version of OS X with the proper autotools,\r\nthe GNU flow above should work.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}